/* Generated By:JavaCC: Do not edit this line. UATokenizer.java */
import java.util.HashMap;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.BufferedInputStream;

public class UATokenizer implements UATokenizerConstants {
  public static void main(String args []) throws ParseException, IOException
  {
        //String inputDirectory = args[0], outputDirectory = args[1];

        //long startMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();

        File[] files = new File("C:/Users/Owner/Documents/big/").listFiles();
        int numFiles = files.length;
        int emailsFound = 0, pricesFound = 0, wordsFound = 0, phonesFound = 0, domainsFound = 0, numTokens = 0;


        BufferedWriter wordWriter   = new BufferedWriter(new FileWriter("word.txt"));
        BufferedWriter emailWriter  = new BufferedWriter(new FileWriter("email.txt"));
        BufferedWriter priceWriter  = new BufferedWriter(new FileWriter("price.txt"));
        BufferedWriter domainWriter = new BufferedWriter(new FileWriter("domain.txt"));
        BufferedWriter phoneWriter  = new BufferedWriter(new FileWriter("phone.txt"));


        BufferedWriter fileWriter;

        HashMap<String, Integer> nonWordMap = new HashMap<String, Integer>();
        HashMap<String, Integer> wordMap = new HashMap<String, Integer>();


        BufferedInputStream bis = null;
        UATokenizer parser;
        Token t;
        int i = 0;
        try {
                String vowels = "aeiou";
        while (i < files.length) {
                                bis = new BufferedInputStream(new FileInputStream(files[i]));
                                parser = new UATokenizer(bis);
                                t = parser.getNextToken();
                                fileWriter = new BufferedWriter(new FileWriter("C:/Users/Owner/Documents/output/" + i + ".html.out"));

           do {

                                t.image = t.image.toLowerCase();

                                Integer incrementFreq;

                                if (t.kind == WORD) {

                                        int len = t.image.length();
                                if (t.image.substring(len -3).indexOf("'") > 0) {
                                        t.image = t.image.substring(0, t.image.substring(len - 3).indexOf("'"));

                                } else if (len > 2 && t.image.substring(len - 2).equals("ed")) {
                                        if (len > 4 &&  (t.image.charAt(len - 3) == 'l'  || t.image.charAt(len - 3) == 'r' || vowels.indexOf(t.image.substring(len - 4, len - 3)) == -1)) {
                                                t.image = t.image.substring(0,len-1);
                                        } else {
                                                t.image = t.image.substring(0,len-2);
                                        }


                                                } else if (len > 3 && t.image.substring(len-3).equals("ing")) {
                                                        if(len > 5 && t.image.charAt(len-5) == t.image.charAt(len-4))
                                                                t.image = t.image.substring(0, len - 4);
                                                        else
                                                                t.image = t.image.substring(0, len - 3);


                                } else if (len > 4 && t.image.substring(len-2).equals("es")) {
                                                        if (vowels.indexOf(t.image.substring(len-3, len-2)) > 0 )  {
                                                                t.image = t.image.substring(0, len - 2);
                                                                if (t.image.substring(t.image.length() - 1).equals("i"))
                                                                        t.image = t.image.substring(0, t.image.length() - 1) + "y";
                                                        } else {
                                                                t.image = t.image.substring(0, len - 1);
                                                         }

                                                } else if (len > 4 && t.image.substring(len-4).equals("sses")) {
                                                        t.image = t.image.substring(0, len-2);

                                                } else if (len > 4 && (t.image.substring(len-3).equals("ied") || t.image.substring(len-3).equals("ies"))) {
                                                        t.image = t.image.substring(0, len-3);
                                                        if (t.image.length() > 1 && vowels.indexOf(t.image.substring(len-1)) == -1) {
                                                                t.image = t.image.substring(0, len-1) + "y";
                                                        } else {
                                                                t.image += "ie";
                                                        }

                                                } else if (t.image.charAt(len-1) == 's' && vowels.indexOf(t.image.substring(len-2, len-1)) == -1) {
                                                        t.image = t.image.substring(0, len-1);

                                                } else if (len > 5 && (t.image.substring(len-5).equals("eedly") || t.image.substring(len - 3).equals("eed"))) {
                                                        t.image = t.image.substring(0, t.image.indexOf("eed"));
                                                        if (t.image.length() == 1) {
                                                                t.image += "eed";
                                                        }
                                                } else if (len > 6 && t.image.substring(len-6).equals("tional")) {
                                                        t.image = t.image.substring(0, len - 4);

                                                } else if ((len > 4 && t.image.substring(len - 4).equals("izer")) || (len > 7 && t.image.substring(len - 7).equals("ization"))) {
                                                        t.image = t.image.substring(0, t.image.indexOf("iz")) + "ize";

                                                } else if (((len > 7 && t.image.substring(len - 7).equals("ational")) || (len > 5 && t.image.substring(len - 5).equals("ation"))) && t.image.substring(0, t.image.indexOf("ation")).length() > 1) {
                                                        t.image = t.image.substring(0, t.image.indexOf("ation")) + "ate";

                                                } else if (len > 4 && t.image.substring(len - 4).equals("ator") && t.image.substring(0, t.image.indexOf("ator")).length() > 1) {
                                                        t.image = t.image.substring(0, len - 4) + "ate";
                                                } else if ((len > 5 && t.image.substring(len - 5).equals("alism")) || (len > 5 && t.image.substring(len - 5).equals("aliti")) || (len > 4 && t.image.substring(len -4).equals("alli"))) {
                                                        if ( t.image.indexOf("alism") > 0 || t.image.indexOf("aliti") > 0)
                                                                t.image = t.image.substring(0, len - 3);
                                                        else
                                                                t.image = t.image.substring(0, len - 2);
                                                } else if (len > 7 && (t.image.substring(len - 7).equals("fulness") || t.image.substring(len - 7).equals("ousness") || t.image.substring(len - 7).equals("iveness"))) {
                                                        t.image = t.image.substring(0, len - 4);

                                                } else if (t.image.substring(len - 2).equals("al") || t.image.substring(len - 2).equals("er") || t.image.substring(len - 2).equals("ic")) {
                                                        t.image = t.image.substring(0, len - 2);
                                                } else if (len > 4 && (t.image.substring(len - 4).equals("ance") || t.image.substring(len - 4).equals("ence") || (t.image.charAt( len - 5) != 't' && t.image.substring(len - 4).equals("able")) || t.image.substring (len - 4).equals("ible") || t.image.substring(len - 4).equals("ment") )) {
                                                        t.image = t.image.substring(0, len - 4);
                                                } else if (len > 3 && ((t.image.substring(len - 3).equals("ent")) || t.image.substring(len - 3).equals("ism") || t.image.substring(len - 3).equals("ate") || (t.image.charAt(len - 4) != 'n' && t.image.substring(len - 3).equals("ant"))
                                                                || t.image.substring(len - 3).equals("ous") || t.image.substring(len - 3).equals("ive") || t.image.substring(len - 3).equals("ize"))) {
                                                        t.image = t.image.substring(0, len - 3);
                                                }




                                        incrementFreq = wordMap.get(t.image);
                                        if (incrementFreq == null) {
                                                wordMap.put(t.image, 1);
                                        } else {
                                                wordMap.put(t.image, incrementFreq + 1);
                                        }
                                                        fileWriter.write(t.image);
                                                                                fileWriter.newLine();
                                        wordWriter.write(t.image);
                                                                                wordWriter.newLine();
                                        wordsFound++;


                                } else if (t.kind == EMAIL) {
                                        incrementFreq = nonWordMap.get(t.image);
                                        if (incrementFreq == null) {
                                                nonWordMap.put(t.image, 1);
                                        } else {
                                                nonWordMap.put(t.image, incrementFreq + 1);
                                        }
                                        fileWriter.write(t.image  + "\u005cn");

                                        emailWriter.write(t.image  + "\u005cn");
                                        emailsFound++;


                                } else if (t.kind == PRICES) {
                                        incrementFreq = nonWordMap.get(t.image);
                                        if (incrementFreq == null) {
                                                nonWordMap.put(t.image, 1);
                                        } else {
                                                nonWordMap.put(t.image, incrementFreq + 1);
                                        }
                                        fileWriter.write(t.image  + "\u005cn");

                                        priceWriter.write(t.image  + "\u005cn");
                                        pricesFound++;


                                } else if (t.kind == DOMAIN) {
                                        incrementFreq = nonWordMap.get(t.image);
                                        if (incrementFreq == null) {
                                               nonWordMap.put(t.image, 1);
                                        } else {
                                               nonWordMap.put(t.image, incrementFreq + 1);
                                        }
                                        fileWriter.write(t.image + "\u005cn");

                                        domainWriter.write(t.image + "\u005cn");
                                        domainsFound++;


                                } else {
                                        if (t.kind == PHONE || t.kind == PHONE2 || t.kind == PHONE3) {
                                               incrementFreq = nonWordMap.get(t.image);
                                               if (incrementFreq == null) {
                                                       nonWordMap.put(t.image, 1);
                                               } else {
                                                       nonWordMap.put(t.image, incrementFreq + 1);
                                               }
                                               fileWriter.write(t.image + "\u005cn");

                                               phoneWriter.write(t.image + "\u005cn");
                                               phonesFound++;

                                    }
                            }

                        t = parser.getNextToken();

                        } while ( t.kind != UATokenizer.EOF );

                        i++;
                        fileWriter.close();
                }

                } catch (FileNotFoundException e) {
                        i++;

                }

        bis.close();
        wordWriter.close();
        emailWriter.close();
        domainWriter.close();
        phoneWriter.close();
        priceWriter.close();

        //System.out.println("TIME OCCURED:\t" + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
        System.out.println("NUM TOKENS:\u005ct" + numTokens);
        System.out.println("NUM FILES:\u005ct" + numFiles);
        System.out.println("NUM PHONES FOUND:\u005ct" + phonesFound);
        System.out.println("NUM DOMAINS FOUND:\u005ct" + domainsFound);
        System.out.println("NUM WORDS FOUND:\u005ct" + wordsFound);
        System.out.println("NUM PRICES FOUND:\u005ct" + pricesFound);
        System.out.println("NUM EMAILS FOUND:\u005ct" + emailsFound);

        HashMap<String, Integer > hashMap = new HashMap<String, Integer >();
        BufferedReader br;
                BufferedWriter bw = null;

                int logicalSize = 0;
                String current;

                for (int x = 0; x < numFiles; x++) {

                        br = new BufferedReader(new FileReader("C:/Users/Owner/Documents/output/" + x + ".html.out"));
                        bw = new BufferedWriter(new FileWriter("C:/Users/Owner/Documents/processedTokens/" + x + "p.html.out"));
                        current = br.readLine();
                        while (current != null) {

                                if (current.equals("teraz")) {
                                        System.out.println("teraz");
                                }

                                if (wordMap.get(current) == null || (wordMap.get(current) < 35 || wordMap.get(current) > 400000 || current.length() > 8 || current.length() < 3)) {
                                        current = br.readLine();
                                        continue;

                                } else {
                                        bw.write(current);
                                        bw.newLine();
                                        current = br.readLine();
                                        hashMap.put(current, 1);

                                }
                        }

                        br.close();
                        bw.close();

                }

                br = new BufferedReader(new FileReader("word.txt"));
                bw = new BufferedWriter(new FileWriter("word2.txt"));
                for (int y = 0; y < wordsFound; y++) {
                        String input = br.readLine();
                        if (input != null && hashMap.get(input) != null) {
                                bw.write(input);
                                bw.newLine();
                                logicalSize++;
                        }
                }

                br.close();

                //end of main method
        }

  /** Generated Token Manager. */
  public UATokenizerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }

  /** Constructor with InputStream. */
  public UATokenizer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public UATokenizer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new UATokenizerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public UATokenizer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new UATokenizerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public UATokenizer(UATokenizerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(UATokenizerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

/*
	
	MUTLITHREADIND
	IDF (cat, D) = LOG (|D| / d(cat))



	CREATING GLOBAL HASH TABLE
		* CREATE A FILE[]
		* CREATE TOTAL FREQUENCY VARIABLE
		* CREATE HASHMAP <STRING, INTEGER>

	PURPOSE OF INODE IN LINUX

	POSTINGS FILE
		* WRITE POSTINGS ALPHABETICALLY
		* 1234567890123456 16 BYTES PER RECORD
		* DOCID     RTF*IDF
		* -----     ------
	

	
*/

}
